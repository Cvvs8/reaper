name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Lint with flake8
      run: |
        pip install flake8
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      continue-on-error: true
    
    - name: Run unit tests with pytest
      run: |
        python -m pytest tests/ -v --tb=short
    
    - name: Test schema validation
      run: |
        python -c "
        from app.utils.schema import APISchemaValidator
        # Test valid SaaS event
        valid_event = {
            'type': 'unauthorized_saas_access',
            'event_id': 'test-001',
            'user': 'test@example.com',
            'source': 'slack',
            'timestamp': '2024-01-01T12:00:00Z'
        }
        is_valid, msg = APISchemaValidator.validate_event(valid_event)
        assert is_valid, f'Valid event failed validation: {msg}'
        print('âœ… Schema validation tests passed')
        "

  security:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan with bandit
      run: |
        pip install bandit
        bandit -r app/ -f json -o bandit-report.json || true
        bandit -r app/ || true
      continue-on-error: true
    
    - name: Upload security scan results
      uses: actions/upload-artifact@v3
      with:
        name: security-scan-results
        path: bandit-report.json
      if: always()

  docker:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t reaper-agent:${{ github.sha }} .
    
    - name: Test Docker container
      run: |
        # Start container in background
        docker run -d --name reaper-test -p 5001:5001 reaper-agent:${{ github.sha }}
        
        # Wait for container to start
        sleep 10
        
        # Test health endpoint
        curl -f http://localhost:5001/ || exit 1
        
        # Run tests inside container
        docker exec reaper-test python run_tests.py
        
        # Stop container
        docker stop reaper-test
    
    - name: Run integration tests in Docker
      run: |
        # Start container
        docker run -d --name reaper-integration -p 5001:5001 reaper-agent:${{ github.sha }}
        sleep 10
        
        # Install requests for integration tests
        pip install requests
        
        # Run integration tests
        python test_reaper.py
        
        # Cleanup
        docker stop reaper-integration

  coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.11
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install coverage pytest-cov
    
    - name: Run tests with coverage
      run: |
        python -m pytest tests/ --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
      continue-on-error: true
    
    - name: Upload coverage report
      uses: actions/upload-artifact@v3
      with:
        name: coverage-report
        path: htmlcov/

  deploy:
    runs-on: ubuntu-latest
    needs: [test, docker]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging (simulation)
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        echo "âœ… Deployment simulation completed"
        
    # In a real scenario, you would add actual deployment steps here:
    # - Deploy to container registry
    # - Update Kubernetes deployment
    # - Run smoke tests against staging
    # - Deploy to production with approval
